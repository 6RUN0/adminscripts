#!/bin/sh -

##
# Default options
backup_name="backup-`hostname`"
work_dir="./"

compress_cmd="`which tar`"
compress_flags="-czf"
compress_suffix=".tar.gz"

mysql_backup_cmd="`which mysqldump`"
mysql_backup_flags="--opt --all-databases"
mysql_backup_suffix=".sql"

encrypt_cmd="`which openssl`"
encrypt_suffix=".dat"

split_cmd="`which split`"
# minidvd size
split_size="1360M"
split_suffix_length=3

secure_copy_cmd="`which scp`"

upload_cmd="`which curl`"

help() {
cat <<EOF
usage: ${0} [config_file]

config variables:

#   variable           ##  default value

work_dir=              # ${work_dir}
backup_name=           # ${backup_name}

# Create mysqldump
# see mysqldump(1)
mysql_backup=          # not set 
mysql_backup_cmd=      # ${mysql_backup_cmd}
mysql_backup_suffix=   # ${mysql_backup_suffix}
mysql_backup_flags=    # ${mysql_backup_flags}
mysql_backup_flags_1=  #
mysql_backup_flags_2=  #
...                    #
mysql_backup_flags_n=  #
mysql_backup_name=     # ${backup_name}${mysql_backup_suffix}
mysql_backup_name_1=   # ${backup_name}_1${mysql_backup_suffix}
mysql_backup_name_2=   # ${backup_name}_2${mysql_backup_suffix}
...                    #
mysql_backup_name_n=   # ${backup_name}_n${mysql_backup_suffix}

# Compress file
# see tar(1)
compress_cmd=          # ${compress_cmd}
compress_flags=        # ${compress_flags}
compress_suffix=       # ${compress_suffix}
compress_files=        # not set
compress_file=         # not set
compress_file_1=       #
compress_file_2=       #
...                    #
compress_file_n=       #

# Encryprion file with openssl
# see openssl(1)
encrypt=               # not set
encrypt_cmd=           # ${encrypt_cmd}
encrypt_suffix=        # ${encrypt_suffix}
encrypt_password=      # requre *

# Split file
# see split(1)
split=                 # not set
split_cmd=             # ${split_cmd}
split_size=            # ${split_size}
split_suffix_length=   # ${split_suffix_length} 

# Copy backup to destination directory
copy=                  # not set
dest_dir=              # requre *
dest_dir_1=            #
dest_dir_2=            #
...                    #
dest_dir_n =           #

# see scp(1)
secure_copy=           # not set
secure_copy_cmd=       # ${secure_copy_cmd}
secure_copy_flags=     # not set
secure_copy_flags_1=   #
secure_copy_flags_2=   #
...                    #
secure_copy_flags_n=   #
                       #
secure_copy_dest=      # requre *
secure_copy_dest_1=    #
secure_copy_dest_2=    #
...                    #
secure_copy_dest_n=    #

# see curl(1)
upload=                #
upload_cmd=            # ${upload_cmd}
upload_url=            # requre *
upload_url_1=          # 
upload_url_2=          #
...                    #
upload_url_n=          # 
upload_user=           # requre *
upload_user_1=         #
upload_user_2=         #
...                    #
upload_user_n=         #
upload_password=       # requre *
upload_password_1=     #
upload_password_2=     #
...                    #
upload_password_n=     #
upload_extra_flags=    # not set
upload_extra_flags_1=  #
upload_extra_flags_2=  #
...                    #
upload_extra_flags_3=  #

# see find(1)
# !!! if define then delete all old files in work_dir
delete_old=            # not set
EOF
}

if [ $# -eq 0 ]; then
  help | less || help | more || help
  exit 1
fi

config="${1}"
if [ -r "${config}" ]; then
  . "${config}"
else
  echo "File \"${config}\" not exist or not read"
  exit 1
fi

##
# "Constants"
DELIMITER=";"
ORIG_IFS="${IFS}"

if [ ! -d "${work_dir}" ]; then 
  mkdir -v -p "${work_dir}" || work_dir="./"
fi
[ -d "${work_dir}" ] && cd "${work_dir}"

case ${mysql_backup} in
  [Yy][Ee][Ss])
    if [ -x "${mysql_backup_cmd}" ]; then
      mysql_backup_flags_item="${mysql_backup_flags}"
      [ -z "${mysql_backup_name}" ] && mysql_backup_name="${backup_name}"
      mysql_backup_file_item="${mysql_backup_name}${mysql_backup_suffix}"
      mysqldump_files=""
      i=0
      while [ ! -z "${mysql_backup_flags_item}" ]; do
        echo "Create mysqldump \"${mysql_backup_file_item}\""
        "${mysql_backup_cmd}" ${mysql_backup_flags_item} > "${mysql_backup_file_item}" && \
          mysqldump_files="${mysqldump_files}${mysql_backup_file_item}${DELIMITER}"
        i=$((i+1))
        eval mysql_backup_flags_item="\$mysql_backup_flags_${i}"
        eval mysql_backup_file_item="\$mysql_backup_name_${i}"
        if [ -z "${mysql_backup_file_item}" ]; then
          mysql_backup_file_item="${mysql_backup_name}${mysql_backup_suffix}_${i}"
        else
          mysql_backup_file_item="${mysql_backup_file_item}${mysql_backup_suffix}"
        fi
      done
    else
      echo "Error. File \"${mysql_backup_cmd}\" not exist or not execute"
      exit 1
    fi
  ;;
esac

compress_files="${compress_files}${mysqldump_files}"
compress_file_item="${compress_file}"
i=0
while [ ! -z "${compress_file_item}" ]; do
  [ -d "${compress_file_item}" -o -f "${compress_file_item}" ] && \
    compress_files="${compress_files}${compress_file_item}${DELIMITER}"
  i=$((i+1))
  eval compress_file_item="\$compress_file_${i}"
done  
if [ -z "${compress_files}" ]; then
  echo "Error. There is nothing to compress."            
  exit 1
fi
if [ ! -x "${compress_cmd}" ]; then
  echo "Error. File \"${compress_cmd}\" not exist or not execute"
  exit 1
fi
backup_file="${backup_name}${compress_suffix}"
echo "Create a archive \"${backup_file}\""
IFS="${DELIMITER}"
"${compress_cmd}" ${compress_flags} "${backup_file}" ${compress_files}
IFS="${ORIG_IFS}"
if [ ! -f "${backup_file}" ]; then
  echo "Error. Archive not create."
  exit 1
fi
if [ ! -z "${mysqldump_files}" ]; then
  echo "Delete mysqldump file(s):"
  IFS="${DELIMITER}"
  rm -f -v ${mysqldump_files}  
  IFS="${ORIG_IFS}"
fi

case ${encrypt} in
  [Yy][Ee][Ss])
    if [ -z "${encrypt_password}" ]; then
      echo "Please enter a password to encrypt files (set variable encrypt_password)"
      exit 1
    fi
    if [ ! -x "${encrypt_cmd}" ]; then
      echo "Error. File \"${encrypt_cmd}\" not exits or not execute"
      exit 1
    fi
    encrypt_backup_file="${backup_name}${encrypt_suffix}"
    echo "Encrypt file \"${backup_file}\""
    "${encrypt_cmd}" enc -aes-256-cbc -e -in "${backup_file}" -out "${encrypt_backup_file}" -k "${encrypt_password}" \
    || exit 1
    echo "Delete archive file(s):"
    rm -f -v "${backup_file}"
    backup_file="${encrypt_backup_file}"
  ;;
esac

case ${split} in
  [Yy][Ee][Ss])
    if [ ! -x "${split_cmd}" ]; then
      echo "File \"${split_cmd}\" not exits or not execute"
      exit 1
    fi
    echo "Splitting a file \"${backup_file}\""
    split_files="${backup_file}."
    "${split_cmd}" -d -b "${split_size}" -a ${split_suffix_length} "${backup_file}" "${split_files}" || split_err=1
    if [ -z "${split_err}" ]; then
      echo "Delete file(s):"
      rm -f -v "${backup_file}"
      backup_file="${split_files}"
    fi
  ;;
esac

case ${copy} in
  [Yy][Ee][Ss])
    dest_dir_item="${dest_dir}"
    i=0
    while [ ! -z "${dest_dir_item}" ]; do
      if [ -d "${dest_dir_item}" ]; then
        echo "Copy file(s):"
        cp -v -f "${backup_file}"* "${dest_dir_item}"
      else
        echo "\"${dest_dir_item}\" is not directory"
      fi
      i=$((i+1))
      eval dest_dir_item="\$dest_dir_${i}"
    done
  ;;
esac

case ${secure_copy} in
  [Yy][Ee][Ss])
    if [ ! -x "${secure_copy_cmd}" ]; then
      echo "File \"${secure_copy_cmd}\" not found or not execute"
      exit 1
    fi
    secure_copy_dest_item="${secure_copy_dest}"
    secure_copy_flags_item="${secure_copy_flags}"
    i=0
    while [ ! -z "${secure_copy_dest_item}" ]; do
      "${secure_copy_cmd}" ${secure_copy_flags_item} "${backup_file}"* ${secure_copy_dest_item}
      i=$((i+1))
      eval secure_copy_flags_item="\$secure_copy_flags_${i}"
      eval secure_copy_dest_item="\$secure_copy_dest_${i}"
    done
  ;;
esac

case ${upload} in
  [Yy][Ee][Ss])    
    if [ ! -x "${upload_cmd}" ]; then
      echo "File \"${upload_cmd}\" not found or not execute"
      exit 1
    fi
    upload_user_item="${upload_user}"
    upload_password_item="${upload_password}"
    upload_url_item="${upload_url}"
    upload_extra_flags_item="${upload_extra_flags}"
    upload_item="${upload_user_item}${upload_password_item}${upload_url_item}"
    i=0
    while [ ! -z "${upload_item}" ]; do
      if [ ! -z "${upload_user_item}" -a ! -z "${upload_password_item}" -a ! -z "${upload_url_item}" ]; then
        for file in "${backup_file}"*; do
          echo "Upload \"${file}\" to \"${upload_url_item}\""
          "${upload_cmd}" ${upload_extra_flags_item} -u"${upload_user_item}":"${upload_password_item}" -T "${file}" "${upload_url_item}"
        done
      else
        echo "Not specified username or password."
      fi
      i=$((i+1))
      eval upload_url_item="\$upload_url_${i}"
      eval upload_user_item="\$upload_user_${i}"
      eval upload_password_item="\$upload_password_${i}"
      eval upload_extra_flags_item="\$upload_extra_flags_${1}"
      [ -z "${upload_extra_flags_item}" ] && upload_extra_flags_item="${upload_extra_flags}"
      upload_item="${upload_user_item}${upload_password_item}${upload_url_item}"
    done
  ;;
esac

if [ ! -z "${delete_old}" ]; then
  if [ ${work_dir} == "./" ]; then
    echo "Please use specific work directory"
    echo "Old backups not delete"
  else
    echo "Delete old backup:"
    find "${work_dir}" -mtime +${delete_old} -print -delete
  fi
fi
