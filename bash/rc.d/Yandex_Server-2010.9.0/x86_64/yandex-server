#!/bin/sh
# $Id: yandex-server.sh,v 1.7 2013/08/30 12:51:01 root Exp root $

### BEGIN INIT INFO
# Provides:          yandex-server
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop the yandex server daemon
# Description:       Start and stop the yandex server daemon
### END INIT INFO

#
# Yandex.Server control script.
#
# The exit codes returned are:
#	0 - operation completed successfully
#	1 - usage error
# 2 - program 'yandex' does not exist or is not executable
# 3 - config file is not found
# 4 - Yandex could not be started
# 5 - Yandex could not be stopped
#	6 - Yandex could not make new index
#	7 - Yandex is not running
#	8 - Cannot start search
#	9 - Cannot stop search
#	10 - Cannot get collection status
#

################ start configuration section ##

if [ -r "/etc/default/yandex-server" ]; then
  . "/etc/default/yandex-server"
elif [ -r "/etc/conf.d/yandex-server" ]; then
  . "/etc/conf.d/yandex-server"
elif [ -r "/etc/yandex-server.conf" ]; then
  . "/etc/yandex-server.conf"
elif [ -r "/usr/local/etc/yandex-server.conf" ]; then
  . "/usr/local/etc/yandex-server.conf"
else
  echo "Warning: config file not found"
fi

# additional libraries
export LD_LIBRARY_PATH="/usr/local/share/yandex/lib:/usr/local/lib:/usr/local/lib64:${LD_LIBRARY_PATH}"

# the path to Yandex binary
yandex="${yandex:="/usr/local/sbin/yandex-server"}"

# Yandex port
port="${port:="17000"}"
# Yandex host
host="${host:="localhost"}"
net_loc="${host}:${port}"

# If you use autorization for access to admin-mode you must edit
# the next line
user="${user:=""}"
password="${password:=""}"

# Yandex options
yandex_opt="-p ${port}"

# the path to the config file
config_file="${config_file:="/usr/local/etc/yandex/yandex.cfg"}"

if [ -r "${config_file}" ]; then
  collections="`sed -n 's/^[[:blank:]]*<[[:blank:]]*Collection[[:blank:]]*.*id="\(.*\)".*>/\1/p' "${config_file}"`"
else
  echo "${error_pref}: \"${config_file}\" is not found."
  retval=3
fi

# a command that can work as an HTTP client, so that it can send request
# to the Yandex.Server. Designed for wget or lynx or fetch, however other
# programs may work.
if which wget >/dev/null 2>&1; then
  http_request_command="wget -O -"
  if [ ! -z "${user}" -a ! -z "${password}" ]; then
    http_request_command="${http_request_command} --user=${user} --password=${password}"
  fi
elif which lynx >/dev/null 2>&1; then
  http_request_command="lynx -dump"
  if [ ! -z "${user}" -a ! -z "${password}" ]; then
    http_request_command="${http_request_command} -auth=${user}:${password}"
  fi
# not test fetch
elif which fetch >/dev/null 2>&1; then
  http_request_command="fetch -o /dev/stdout"
  if [ ! -z "${user}" -a ! -z "${password}" ]; then
    net_loc="${user}:${password}@${host}:${port}"
  fi
else
  echo "${0}: Error: Can't find 'wget' or 'lynx' or 'fetch' and can't send HTTP-request to the Yandex.Server."
  exit 1
fi

################ end configuration section ###

retval=0
################## start functions description ##################
# Try to send HTTP-query to Yandex.Server
#
do_query() {
  if [ -z "${verbose}" ]; then
    ${http_request_command} "${*}" >/dev/null 2>&1
  else
	  ${http_request_command} "${*}" 2>/dev/null
  fi
}

##
# Start Yandex.Server
#
start_yandex() {
  echo "Starting Yandex.Server (${yandex})"
  error_pref="${0} start: error: cannot start Yandex.Server"
  if [ ${running} -eq 1 ]; then
    echo "${error_pref}: ${status}"
    retval=4
  elif [ ! -x ${yandex} ]; then
	  echo "${error_pref}: \"${yandex}\" does not exist or is not executable."
	  retval=2
  elif [ ! -f ${config_file} ]; then
	  echo "${error_pref}: \"${config_file}\" is not found."
	  retval=3
  else
	  "${yandex}" ${yandex_opt} "${config_file}"
    if [ ${?} -ne 0 ]; then
      echo "${0} start: error: cannot run ${yandex}."
      echo "Try to find error description in /var/local/yandex/yandex.log"
	    retval=4
    fi
  fi
}

##
# Stop Yandex.Server
#
stop_yandex() {
  echo "Stopping Yandex.Server (${yandex})"
  error_pref="${0} stop: error"
  if [ ${running} -eq 0 ]; then
	  echo "${error_pref}: ${status}"
	  retval=5
  else
	  if do_query "http://${net_loc}/admin?action=shutdown"; then
      running=0
    elif killall "${yandex}"; then
      running=0
	  else
      echo "${error_pref}: ${yandex} could not be stopped"
	    retval=5
    fi
  fi
}

##
# Only search start
#
search_start() {
  echo "Starting search"
  error_pref="${0}: start search: error"
  if [ ${running} -eq 0 ]; then
	  echo "${error_pref}: ${status}"
	  retval=7
  else
    for collection in ${collections}; do
      if get_collection_status | grep "Searching" >/dev/null; then
        echo "${error_pref}: search already started"
        retval=8
      elif ! do_query "http://${net_loc}/admin?id=${collection}&action=startsearch&brief=yes"; then
        echo "${error_pref}: cannot start search"
        retval=8
        fi
    done
  fi
}

##
# Only search stop
#
search_stop() {
  echo "Stopping search"
  error_pref="${0}: stop search: error"
  if [ ${running} -eq 0 ]; then
	  echo "${error_pref}: ${status}"
	  retval=7
  else
    for collection in ${collections}; do
      if ! get_collection_status | grep "Searching" >/dev/null; then
        echo "${error_pref}: search already stopped"
        retval=8
      elif ! do_query "http://${net_loc}/admin?id=${collection}&action=stopsearch&brief=yes"; then
	      echo "${error_pref}: cannot stop search"
	      retval=9
      fi
    done
  fi
}

##
# Get collection status
#
collection_status() {
  for collection in ${collections}; do
    echo "Collection \"${collection}\" status:"
    error_pref="${0}: error"
    if [ ${running} -eq 0 ]; then
      echo "${error_pref}: ${status}"
      retval=7
    else
      get_collection_status
    fi
  done
}

get_collection_status() {
  do_query "http://${net_loc}/admin?id=${collection}&action=status&brief=yes"
  if [ ${?} -ne 0 ]; then
    echo "${error_pref}: cannot get collection \"${collection}\" status."
    retval=10
  fi
}

##
# Start indexing
#
reindex() {
  error_pref="${0} reindex: error: cannot start indexing"
  if [ ${running} -eq 0 ]; then
    # Yandex.Server is not running. Try start.
    start_yandex
    sleep 5
    get_yandex_status
    if [ ${running} -eq 0 ]; then
      echo "${error_pref}: ${status}"
      retval=7
      return ${retval}
    fi
  fi
  for collection in ${collections}; do
    echo "Collection ${collection} reindex start."
    do_query "http://${net_loc}/admin?id=${collection}&action=bi&brief=yes"
    if [ ${?} -ne 0 ]; then
      echo "${0} reindex: error: cannot reindex"
	    retval=6
    fi
  done
}

##
# Get status
#
get_yandex_status() {
  proc_status=`ps ax | grep "${yandex}" | grep -v grep`
  if [ -z "${proc_status}" ]; then
    status="${yandex} is not running"
    running=0
  else
    status="${yandex} is running"
    running=1
  fi
}

##
# Print help
#
print_help() {
cat <<EOF
 -v         - verbose mode
 start      - start yandex
 stop       - stop yandex
 restart    - restart yandex
 status     - print yandex status
 reindex    - start reindexing
 sstart     - start search
 sstop      - stop search
 srestart   - restart search
 cstatus    - print collection's status
EOF
}

## end functions description ##

argv=${@}
if [ -z "${argv}" ]; then
  args="help"
fi

for arg in ${@} ${args}; do
  get_yandex_status
  case ${arg} in
    -v)
      verbose=yes
    ;;
    start)
      start_yandex
    ;;
    stop)
      stop_yandex
    ;;
    restart)
      stop_yandex
      sleep 2
      start_yandex
    ;;
    sstart)
      search_start
    ;;
    sstop)
      search_stop
    ;;
    srestart)
      search_stop
      sleep 1
      search_start
    ;;
    status)
      echo "Yandex.Server: ${status}"
      if [ ${running} -eq 1 ]; then
        exit 0
      else
        exit 1
      fi
    ;;
    reindex)
      reindex
    ;;
    cstatus)
      collection_status
    ;;
    *)
      echo "Usage: ${0} [-v] {start|stop|restart|status|reindex}"
      print_help
      retval=1
    ;;
  esac
done

exit ${retval}
